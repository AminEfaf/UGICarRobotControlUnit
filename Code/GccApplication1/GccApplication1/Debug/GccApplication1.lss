
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000460  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008aa  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061d  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000410  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ae  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ec7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 00 	call	0xea	; 0xea <main>
  8a:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
void move_right (void);
void move_left (void);


ISR(TIMER0_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25

	overflow++; 
  a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <overflow>
  a4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <overflow+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <overflow+0x1>
  ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <overflow>
	TCNT0=0x00;
  b2:	12 be       	out	0x32, r1	; 50
//PORTB ^= (1 << PORTB0); 
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <_Z10move_frontv>:
	PORTC  = 0;
}

void move_front (void)
{
PORTD  = 0B00010000;
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	82 bb       	out	0x12, r24	; 18
PORTC  = 0B00000101;		
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret

000000cc <_Z9move_backv>:
}
void move_back  (void){
 PORTD = 0B00100000;
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	82 bb       	out	0x12, r24	; 18
PORTC = 0B00001010;
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	08 95       	ret

000000d6 <_Z10move_rightv>:
}
void move_right (void)
{
PORTD = 0B01000000;
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	82 bb       	out	0x12, r24	; 18
PORTC = 0B00001000;
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	85 bb       	out	0x15, r24	; 21
  de:	08 95       	ret

000000e0 <_Z9move_leftv>:
}
void move_left (void)
{
PORTD = 0B10000000;
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	82 bb       	out	0x12, r24	; 18
PORTC = 0B00000010;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	08 95       	ret

000000ea <main>:
}


int main(void)
{
   DDRC  = 0x0f;
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	84 bb       	out	0x14, r24	; 20
   DDRD  = 0xf0;
  ee:	80 ef       	ldi	r24, 0xF0	; 240
  f0:	81 bb       	out	0x11, r24	; 17
   
   DDRA |= (1 << DDA0);
  f2:	d0 9a       	sbi	0x1a, 0	; 26
   DDRA &= ~(1 << DDA1);
  f4:	d1 98       	cbi	0x1a, 1	; 26
   
   DDRB=0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	87 bb       	out	0x17, r24	; 23
   
   TCCR0=0x02;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	83 bf       	out	0x33, r24	; 51
   TCNT0=0x00;
  fe:	12 be       	out	0x32, r1	; 50
   OCR0=0x00;
 100:	1c be       	out	0x3c, r1	; 60
   TIMSK|=(1<<TOIE0);
 102:	89 b7       	in	r24, 0x39	; 57
 104:	81 60       	ori	r24, 0x01	; 1
 106:	89 bf       	out	0x39, r24	; 57
   	
	sei(); 	
 108:	78 94       	sei

  while (1) 
  {

		PORTA = 0X01;
 10a:	bb 24       	eor	r11, r11
 10c:	b3 94       	inc	r11
		PORTA = 0X00;
		
	while(!((PINA & (1 << PINA1)) == (1 << PINA1)));
		overflow=0;
		TCNT0=0;
		TCCR0=0x02;	
 10e:	02 e0       	ldi	r16, 0x02	; 2
	sei(); 	

  while (1) 
  {

		PORTA = 0X01;
 110:	1b 2d       	mov	r17, r11
 112:	1b bb       	out	0x1b, r17	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	28 e2       	ldi	r18, 0x28	; 40
 116:	2a 95       	dec	r18
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x2c>
		_delay_us(15);
		PORTA = 0X00;
 11a:	1b ba       	out	0x1b, r1	; 27
		
	while(!((PINA & (1 << PINA1)) == (1 << PINA1)));
 11c:	c9 9b       	sbis	0x19, 1	; 25
 11e:	fe cf       	rjmp	.-4      	; 0x11c <main+0x32>
		overflow=0;
 120:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <overflow+0x1>
 124:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <overflow>
		TCNT0=0;
 128:	12 be       	out	0x32, r1	; 50
		TCCR0=0x02;	
 12a:	03 bf       	out	0x33, r16	; 51
		
		
			
	while(((PINA & (1 << PINA1)) == (1 << PINA1)));
 12c:	c9 99       	sbic	0x19, 1	; 25
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x42>
		TCCR0=0x00;
 130:	13 be       	out	0x33, r1	; 51
		
		Counter=(overflow*256)+TCNT0;
 132:	82 b7       	in	r24, 0x32	; 50
 134:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <overflow>
 138:	d9 2f       	mov	r29, r25
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	c2 2f       	mov	r28, r18
 13e:	6e 01       	movw	r12, r28
 140:	c8 0e       	add	r12, r24
 142:	d1 1c       	adc	r13, r1
 144:	0d 2c       	mov	r0, r13
 146:	00 0c       	add	r0, r0
 148:	ee 08       	sbc	r14, r14
 14a:	ff 08       	sbc	r15, r15
 14c:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <Counter>
 150:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <Counter+0x1>
 154:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <Counter+0x2>
 158:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <Counter+0x3>
		distance=(Counter/2)*0.03432 ;
 15c:	c7 01       	movw	r24, r14
 15e:	b6 01       	movw	r22, r12
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	77 95       	ror	r23
 166:	67 95       	ror	r22
 168:	0e 94 0f 01 	call	0x21e	; 0x21e <__floatunsisf>
 16c:	21 e2       	ldi	r18, 0x21	; 33
 16e:	33 e9       	ldi	r19, 0x93	; 147
 170:	4c e0       	ldi	r20, 0x0C	; 12
 172:	5d e3       	ldi	r21, 0x3D	; 61
 174:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__mulsf3>
 178:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <distance>
 17c:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <distance+0x1>
 180:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <distance+0x2>
 184:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <distance+0x3>
		
		if(Counter < 30000)
 188:	20 e3       	ldi	r18, 0x30	; 48
 18a:	c2 16       	cp	r12, r18
 18c:	25 e7       	ldi	r18, 0x75	; 117
 18e:	d2 06       	cpc	r13, r18
 190:	e1 04       	cpc	r14, r1
 192:	f1 04       	cpc	r15, r1
 194:	08 f0       	brcs	.+2      	; 0x198 <main+0xae>
 196:	bd cf       	rjmp	.-134    	; 0x112 <main+0x28>
		{		
			if(distance <5)
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 ea       	ldi	r20, 0xA0	; 160
 19e:	50 e4       	ldi	r21, 0x40	; 64
 1a0:	0e 94 0a 01 	call	0x214	; 0x214 <__cmpsf2>
 1a4:	88 23       	and	r24, r24
 1a6:	24 f4       	brge	.+8      	; 0x1b0 <main+0xc6>
			{
				PORTB = 0b00000001;
 1a8:	b8 ba       	out	0x18, r11	; 24
				PORTD  = 0x00;
 1aa:	12 ba       	out	0x12, r1	; 18
				PORTC  = 0x00;				
 1ac:	15 ba       	out	0x15, r1	; 21
 1ae:	28 c0       	rjmp	.+80     	; 0x200 <main+0x116>
			}else
			{
			PORTB = 0b00000000;
 1b0:	18 ba       	out	0x18, r1	; 24
			i++;
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 1b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
			if (i==1)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	91 05       	cpc	r25, r1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0xe6>
			{
				move_front();
 1ca:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z10move_frontv>
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <main+0x116>
			}else if (i==10)
 1d0:	8a 30       	cpi	r24, 0x0A	; 10
 1d2:	91 05       	cpc	r25, r1
 1d4:	19 f4       	brne	.+6      	; 0x1dc <main+0xf2>
			{
				move_back();
 1d6:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9move_backv>
 1da:	12 c0       	rjmp	.+36     	; 0x200 <main+0x116>
					
			}else if (i==20)
 1dc:	84 31       	cpi	r24, 0x14	; 20
 1de:	91 05       	cpc	r25, r1
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <main+0xfe>
			{
				move_right();
 1e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z10move_rightv>
 1e6:	0c c0       	rjmp	.+24     	; 0x200 <main+0x116>
					
			}
			else if (i==30)
 1e8:	8e 31       	cpi	r24, 0x1E	; 30
 1ea:	91 05       	cpc	r25, r1
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <main+0x10a>
			{
				move_left();
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <_Z9move_leftv>
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <main+0x116>
				
			}
			else if (i==40)
 1f4:	88 97       	sbiw	r24, 0x28	; 40
 1f6:	21 f4       	brne	.+8      	; 0x200 <main+0x116>
			{
				i=0;			
 1f8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 1fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	94 e3       	ldi	r25, 0x34	; 52
 204:	2c e0       	ldi	r18, 0x0C	; 12
 206:	81 50       	subi	r24, 0x01	; 1
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x11c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x126>
 210:	00 00       	nop
 212:	7f cf       	rjmp	.-258    	; 0x112 <main+0x28>

00000214 <__cmpsf2>:
 214:	0e 94 4c 01 	call	0x298	; 0x298 <__fp_cmp>
 218:	08 f4       	brcc	.+2      	; 0x21c <__cmpsf2+0x8>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <__floatunsisf>:
 21e:	e8 94       	clt
 220:	09 c0       	rjmp	.+18     	; 0x234 <__floatsisf+0x12>

00000222 <__floatsisf>:
 222:	97 fb       	bst	r25, 7
 224:	3e f4       	brtc	.+14     	; 0x234 <__floatsisf+0x12>
 226:	90 95       	com	r25
 228:	80 95       	com	r24
 22a:	70 95       	com	r23
 22c:	61 95       	neg	r22
 22e:	7f 4f       	sbci	r23, 0xFF	; 255
 230:	8f 4f       	sbci	r24, 0xFF	; 255
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	99 23       	and	r25, r25
 236:	a9 f0       	breq	.+42     	; 0x262 <__floatsisf+0x40>
 238:	f9 2f       	mov	r31, r25
 23a:	96 e9       	ldi	r25, 0x96	; 150
 23c:	bb 27       	eor	r27, r27
 23e:	93 95       	inc	r25
 240:	f6 95       	lsr	r31
 242:	87 95       	ror	r24
 244:	77 95       	ror	r23
 246:	67 95       	ror	r22
 248:	b7 95       	ror	r27
 24a:	f1 11       	cpse	r31, r1
 24c:	f8 cf       	rjmp	.-16     	; 0x23e <__floatsisf+0x1c>
 24e:	fa f4       	brpl	.+62     	; 0x28e <__floatsisf+0x6c>
 250:	bb 0f       	add	r27, r27
 252:	11 f4       	brne	.+4      	; 0x258 <__floatsisf+0x36>
 254:	60 ff       	sbrs	r22, 0
 256:	1b c0       	rjmp	.+54     	; 0x28e <__floatsisf+0x6c>
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	8f 4f       	sbci	r24, 0xFF	; 255
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	16 c0       	rjmp	.+44     	; 0x28e <__floatsisf+0x6c>
 262:	88 23       	and	r24, r24
 264:	11 f0       	breq	.+4      	; 0x26a <__floatsisf+0x48>
 266:	96 e9       	ldi	r25, 0x96	; 150
 268:	11 c0       	rjmp	.+34     	; 0x28c <__floatsisf+0x6a>
 26a:	77 23       	and	r23, r23
 26c:	21 f0       	breq	.+8      	; 0x276 <__floatsisf+0x54>
 26e:	9e e8       	ldi	r25, 0x8E	; 142
 270:	87 2f       	mov	r24, r23
 272:	76 2f       	mov	r23, r22
 274:	05 c0       	rjmp	.+10     	; 0x280 <__floatsisf+0x5e>
 276:	66 23       	and	r22, r22
 278:	71 f0       	breq	.+28     	; 0x296 <__floatsisf+0x74>
 27a:	96 e8       	ldi	r25, 0x86	; 134
 27c:	86 2f       	mov	r24, r22
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	2a f0       	brmi	.+10     	; 0x28e <__floatsisf+0x6c>
 284:	9a 95       	dec	r25
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	88 1f       	adc	r24, r24
 28c:	da f7       	brpl	.-10     	; 0x284 <__floatsisf+0x62>
 28e:	88 0f       	add	r24, r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	97 f9       	bld	r25, 7
 296:	08 95       	ret

00000298 <__fp_cmp>:
 298:	99 0f       	add	r25, r25
 29a:	00 08       	sbc	r0, r0
 29c:	55 0f       	add	r21, r21
 29e:	aa 0b       	sbc	r26, r26
 2a0:	e0 e8       	ldi	r30, 0x80	; 128
 2a2:	fe ef       	ldi	r31, 0xFE	; 254
 2a4:	16 16       	cp	r1, r22
 2a6:	17 06       	cpc	r1, r23
 2a8:	e8 07       	cpc	r30, r24
 2aa:	f9 07       	cpc	r31, r25
 2ac:	c0 f0       	brcs	.+48     	; 0x2de <__fp_cmp+0x46>
 2ae:	12 16       	cp	r1, r18
 2b0:	13 06       	cpc	r1, r19
 2b2:	e4 07       	cpc	r30, r20
 2b4:	f5 07       	cpc	r31, r21
 2b6:	98 f0       	brcs	.+38     	; 0x2de <__fp_cmp+0x46>
 2b8:	62 1b       	sub	r22, r18
 2ba:	73 0b       	sbc	r23, r19
 2bc:	84 0b       	sbc	r24, r20
 2be:	95 0b       	sbc	r25, r21
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__fp_cmp+0x38>
 2c2:	0a 26       	eor	r0, r26
 2c4:	61 f0       	breq	.+24     	; 0x2de <__fp_cmp+0x46>
 2c6:	23 2b       	or	r18, r19
 2c8:	24 2b       	or	r18, r20
 2ca:	25 2b       	or	r18, r21
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <__fp_cmp+0x3e>
 2ce:	08 95       	ret
 2d0:	0a 26       	eor	r0, r26
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <__fp_cmp+0x3e>
 2d4:	a1 40       	sbci	r26, 0x01	; 1
 2d6:	a6 95       	lsr	r26
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	81 1d       	adc	r24, r1
 2dc:	81 1d       	adc	r24, r1
 2de:	08 95       	ret

000002e0 <__mulsf3>:
 2e0:	0e 94 83 01 	call	0x306	; 0x306 <__mulsf3x>
 2e4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_round>
 2e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fp_pscA>
 2ec:	38 f0       	brcs	.+14     	; 0x2fc <__mulsf3+0x1c>
 2ee:	0e 94 ed 01 	call	0x3da	; 0x3da <__fp_pscB>
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__mulsf3+0x1c>
 2f4:	95 23       	and	r25, r21
 2f6:	11 f0       	breq	.+4      	; 0x2fc <__mulsf3+0x1c>
 2f8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__fp_inf>
 2fc:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__fp_nan>
 300:	11 24       	eor	r1, r1
 302:	0c 94 28 02 	jmp	0x450	; 0x450 <__fp_szero>

00000306 <__mulsf3x>:
 306:	0e 94 05 02 	call	0x40a	; 0x40a <__fp_split3>
 30a:	70 f3       	brcs	.-36     	; 0x2e8 <__mulsf3+0x8>

0000030c <__mulsf3_pse>:
 30c:	95 9f       	mul	r25, r21
 30e:	c1 f3       	breq	.-16     	; 0x300 <__mulsf3+0x20>
 310:	95 0f       	add	r25, r21
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	55 1f       	adc	r21, r21
 316:	62 9f       	mul	r22, r18
 318:	f0 01       	movw	r30, r0
 31a:	72 9f       	mul	r23, r18
 31c:	bb 27       	eor	r27, r27
 31e:	f0 0d       	add	r31, r0
 320:	b1 1d       	adc	r27, r1
 322:	63 9f       	mul	r22, r19
 324:	aa 27       	eor	r26, r26
 326:	f0 0d       	add	r31, r0
 328:	b1 1d       	adc	r27, r1
 32a:	aa 1f       	adc	r26, r26
 32c:	64 9f       	mul	r22, r20
 32e:	66 27       	eor	r22, r22
 330:	b0 0d       	add	r27, r0
 332:	a1 1d       	adc	r26, r1
 334:	66 1f       	adc	r22, r22
 336:	82 9f       	mul	r24, r18
 338:	22 27       	eor	r18, r18
 33a:	b0 0d       	add	r27, r0
 33c:	a1 1d       	adc	r26, r1
 33e:	62 1f       	adc	r22, r18
 340:	73 9f       	mul	r23, r19
 342:	b0 0d       	add	r27, r0
 344:	a1 1d       	adc	r26, r1
 346:	62 1f       	adc	r22, r18
 348:	83 9f       	mul	r24, r19
 34a:	a0 0d       	add	r26, r0
 34c:	61 1d       	adc	r22, r1
 34e:	22 1f       	adc	r18, r18
 350:	74 9f       	mul	r23, r20
 352:	33 27       	eor	r19, r19
 354:	a0 0d       	add	r26, r0
 356:	61 1d       	adc	r22, r1
 358:	23 1f       	adc	r18, r19
 35a:	84 9f       	mul	r24, r20
 35c:	60 0d       	add	r22, r0
 35e:	21 1d       	adc	r18, r1
 360:	82 2f       	mov	r24, r18
 362:	76 2f       	mov	r23, r22
 364:	6a 2f       	mov	r22, r26
 366:	11 24       	eor	r1, r1
 368:	9f 57       	subi	r25, 0x7F	; 127
 36a:	50 40       	sbci	r21, 0x00	; 0
 36c:	9a f0       	brmi	.+38     	; 0x394 <__mulsf3_pse+0x88>
 36e:	f1 f0       	breq	.+60     	; 0x3ac <__mulsf3_pse+0xa0>
 370:	88 23       	and	r24, r24
 372:	4a f0       	brmi	.+18     	; 0x386 <__mulsf3_pse+0x7a>
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	bb 1f       	adc	r27, r27
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	91 50       	subi	r25, 0x01	; 1
 382:	50 40       	sbci	r21, 0x00	; 0
 384:	a9 f7       	brne	.-22     	; 0x370 <__mulsf3_pse+0x64>
 386:	9e 3f       	cpi	r25, 0xFE	; 254
 388:	51 05       	cpc	r21, r1
 38a:	80 f0       	brcs	.+32     	; 0x3ac <__mulsf3_pse+0xa0>
 38c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__fp_inf>
 390:	0c 94 28 02 	jmp	0x450	; 0x450 <__fp_szero>
 394:	5f 3f       	cpi	r21, 0xFF	; 255
 396:	e4 f3       	brlt	.-8      	; 0x390 <__mulsf3_pse+0x84>
 398:	98 3e       	cpi	r25, 0xE8	; 232
 39a:	d4 f3       	brlt	.-12     	; 0x390 <__mulsf3_pse+0x84>
 39c:	86 95       	lsr	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b7 95       	ror	r27
 3a4:	f7 95       	ror	r31
 3a6:	e7 95       	ror	r30
 3a8:	9f 5f       	subi	r25, 0xFF	; 255
 3aa:	c1 f7       	brne	.-16     	; 0x39c <__mulsf3_pse+0x90>
 3ac:	fe 2b       	or	r31, r30
 3ae:	88 0f       	add	r24, r24
 3b0:	91 1d       	adc	r25, r1
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	97 f9       	bld	r25, 7
 3b8:	08 95       	ret

000003ba <__fp_inf>:
 3ba:	97 f9       	bld	r25, 7
 3bc:	9f 67       	ori	r25, 0x7F	; 127
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <__fp_nan>:
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	08 95       	ret

000003cc <__fp_pscA>:
 3cc:	00 24       	eor	r0, r0
 3ce:	0a 94       	dec	r0
 3d0:	16 16       	cp	r1, r22
 3d2:	17 06       	cpc	r1, r23
 3d4:	18 06       	cpc	r1, r24
 3d6:	09 06       	cpc	r0, r25
 3d8:	08 95       	ret

000003da <__fp_pscB>:
 3da:	00 24       	eor	r0, r0
 3dc:	0a 94       	dec	r0
 3de:	12 16       	cp	r1, r18
 3e0:	13 06       	cpc	r1, r19
 3e2:	14 06       	cpc	r1, r20
 3e4:	05 06       	cpc	r0, r21
 3e6:	08 95       	ret

000003e8 <__fp_round>:
 3e8:	09 2e       	mov	r0, r25
 3ea:	03 94       	inc	r0
 3ec:	00 0c       	add	r0, r0
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <__fp_round+0xc>
 3f0:	88 23       	and	r24, r24
 3f2:	52 f0       	brmi	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f4:	bb 0f       	add	r27, r27
 3f6:	40 f4       	brcc	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	bf 2b       	or	r27, r31
 3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	60 ff       	sbrs	r22, 0
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	6f 5f       	subi	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	08 95       	ret

0000040a <__fp_split3>:
 40a:	57 fd       	sbrc	r21, 7
 40c:	90 58       	subi	r25, 0x80	; 128
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	59 f0       	breq	.+22     	; 0x42a <__fp_splitA+0x10>
 414:	5f 3f       	cpi	r21, 0xFF	; 255
 416:	71 f0       	breq	.+28     	; 0x434 <__fp_splitA+0x1a>
 418:	47 95       	ror	r20

0000041a <__fp_splitA>:
 41a:	88 0f       	add	r24, r24
 41c:	97 fb       	bst	r25, 7
 41e:	99 1f       	adc	r25, r25
 420:	61 f0       	breq	.+24     	; 0x43a <__fp_splitA+0x20>
 422:	9f 3f       	cpi	r25, 0xFF	; 255
 424:	79 f0       	breq	.+30     	; 0x444 <__fp_splitA+0x2a>
 426:	87 95       	ror	r24
 428:	08 95       	ret
 42a:	12 16       	cp	r1, r18
 42c:	13 06       	cpc	r1, r19
 42e:	14 06       	cpc	r1, r20
 430:	55 1f       	adc	r21, r21
 432:	f2 cf       	rjmp	.-28     	; 0x418 <__fp_split3+0xe>
 434:	46 95       	lsr	r20
 436:	f1 df       	rcall	.-30     	; 0x41a <__fp_splitA>
 438:	08 c0       	rjmp	.+16     	; 0x44a <__fp_splitA+0x30>
 43a:	16 16       	cp	r1, r22
 43c:	17 06       	cpc	r1, r23
 43e:	18 06       	cpc	r1, r24
 440:	99 1f       	adc	r25, r25
 442:	f1 cf       	rjmp	.-30     	; 0x426 <__fp_splitA+0xc>
 444:	86 95       	lsr	r24
 446:	71 05       	cpc	r23, r1
 448:	61 05       	cpc	r22, r1
 44a:	08 94       	sec
 44c:	08 95       	ret

0000044e <__fp_zero>:
 44e:	e8 94       	clt

00000450 <__fp_szero>:
 450:	bb 27       	eor	r27, r27
 452:	66 27       	eor	r22, r22
 454:	77 27       	eor	r23, r23
 456:	cb 01       	movw	r24, r22
 458:	97 f9       	bld	r25, 7
 45a:	08 95       	ret

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
